Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 securityonion-bro-scripts (20121004-0ubuntu0securityonion34) precise; urgency=low
 .
   * update ShellShock for DHCP detection
Author: Doug Burks <doug.burks@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- securityonion-bro-scripts-20121004.orig/shellshock/main.bro
+++ securityonion-bro-scripts-20121004/shellshock/main.bro
@@ -11,6 +11,10 @@ export {
 		Exploit
 	};
 
+	redef enum HTTP::Tags += {
+		HIT
+	};
+
 	## This contains a list of MIME types that would typically be
 	## seen as droppers after the exploitation of ShellShock.
 	const post_exploit_file_types: set[string] = {
@@ -18,9 +22,9 @@ export {
 		"application/x-dosexec",    ##< windows executables in case someone is exploiting cygwin
 	} &redef;
 
-	redef enum HTTP::Tags += {
-		HIT
-	};
+	## The pattern for matching shellshock attacks.  This is 
+	## also defined separately in the .sig file.
+	const matcher = /.*(\(|%28)(\)|%29)( |%20)(\{|%7B)/ &redef;
 }
 
 redef Signatures::actions += {
@@ -33,17 +37,21 @@ event bro_init()
 	                             $apply=set(SumStats::LAST),
 	                             $num_last_elements=2);
 
-	local r2 = SumStats::Reducer($stream="shellshock.possible_post_exploit_file", 
+	local r2 = SumStats::Reducer($stream="shellshock.possible_dhcp_victim", 
 	                             $apply=set(SumStats::LAST),
 	                             $num_last_elements=2);
 
-	local r3 = SumStats::Reducer($stream="shellshock.possible_post_exploit_ping", 
+	local r3 = SumStats::Reducer($stream="shellshock.possible_post_exploit_file", 
+	                             $apply=set(SumStats::LAST),
+	                             $num_last_elements=2);
+
+	local r4 = SumStats::Reducer($stream="shellshock.possible_post_exploit_ping", 
 	                             $apply=set(SumStats::LAST),
 	                             $num_last_elements=2);
 
 	SumStats::create([$name="look-for-shellshock",
 	                  $epoch=5mins,
-	                  $reducers=set(r1, r2, r3),
+	                  $reducers=set(r1, r2, r3, r4),
 	                  $threshold_val(key: SumStats::Key, result: SumStats::Result): double =
 	                  	{
 	                  	local exploit_file = result["shellshock.possible_post_exploit_file"];
@@ -53,29 +61,45 @@ event bro_init()
 	                  $threshold = 1.0,
 	                  $threshold_crossed(key: SumStats::Key, result: SumStats::Result) = 
 	                  	{
-	                  	local attacks = result["shellshock.possible_http_victim"];
+	                  	local http_attacks = result["shellshock.possible_http_victim"];
+	                  	local dhcp_attacks = result["shellshock.possible_dhcp_victim"];
+	                  	local total_attacks = http_attacks$num + dhcp_attacks$num;
+	                  	
 	                  	local exploit_file = result["shellshock.possible_post_exploit_file"];
 	                  	local exploit_ping = result["shellshock.possible_post_exploit_ping"];
-	                  	if ( attacks$num > 0 )
+	                  	if ( total_attacks > 0 )
 	                  		{
-	                  		local sub_msg = "";
+	                  		local attack_msg = "Attack over";
+	                  		local exploit_msg = "";
+	                  		local attack_time: time;
+	                  		if ( http_attacks$num > 0 )
+	                  			{
+	                  			attack_msg = fmt("%s HTTP", attack_msg);
+	                  			attack_time = http_attacks$begin;
+	                  			}
+	                  		else if ( dhcp_attacks$num > 0 )
+	                  			{
+	                  			attack_msg = fmt("%s DHCP", attack_msg);
+	                  			attack_time = dhcp_attacks$begin;
+	                  			}
+
 	                  		if ( exploit_file$num > 0 )
 	                  			{
-	                  			sub_msg = fmt("Requested a potential dropper within %.3f seconds of an attack", exploit_file$begin-attacks$begin);
+	                  			exploit_msg = fmt("requested a potential dropper within %.3f seconds of an attack", exploit_file$begin-attack_time);
 	                  			}
 	                  		if ( exploit_ping$num > 0 )
 	                  			{
-	                  			if ( sub_msg != "" )
-	                  				sub_msg += " and ";
+	                  			if ( exploit_msg != "" )
+	                  				exploit_msg += " and ";
 
 	                  			local ping_dst = SumStats::get_last(exploit_ping)[0]$str;
-	                  			sub_msg = fmt("%sSent a ping to %s within %.3f seconds of an attack.", sub_msg, ping_dst, exploit_ping$begin-attacks$begin);
+	                  			exploit_msg = fmt("%ssent a ping to %s within %.3f seconds of an attack.", exploit_msg, ping_dst, exploit_ping$begin-attack_time);
 	                  			}
 
 	                  		NOTICE([$note=Exploit,
 	                  		        $src=key$host,
 	                  		        $msg=fmt("High likelyhood of successful CVE-2014-6271 exploitation against %s.", key$host),
-	                  		        $sub=sub_msg,
+	                  		        $sub=fmt("%s and %s", attack_msg, exploit_msg),
 	                  		        $identifier=cat(key$host)]);
 	                  		}
 	                  	}]);
@@ -92,6 +116,14 @@ function ShellShock::http_header_sig_mat
 	return F;
 	}
 
+event dhcp_ack(c: connection, msg: dhcp_msg, mask: addr, router: dhcp_router_list, lease: interval, serv_addr: addr, host_name: string)
+	{
+	if ( matcher in host_name )
+		{
+		SumStats::observe("shellshock.possible_dhcp_victim", [$host=c$id$resp_h], [$str=host_name]);
+		}
+	}
+
 function ShellShock::http_request_sig_match(state: signature_state, data: string): bool
 	{
 	local c = state$conn;
@@ -115,3 +147,4 @@ event icmp_echo_request(c: connection, i
 	{
 	SumStats::observe("shellshock.possible_post_exploit_ping", [$host=c$id$orig_h], [$str=cat(c$id$resp_h)]);
 	}
+
