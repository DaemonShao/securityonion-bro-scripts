Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 securityonion-bro-scripts (20121004-0ubuntu0securityonion2) precise; urgency=low
 .
   * update scripts to support per-interface bpf
Author: Doug Burks <doug.burks@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- securityonion-bro-scripts-20121004.orig/add-interface-to-logs.bro
+++ securityonion-bro-scripts-20121004/add-interface-to-logs.bro
@@ -6,13 +6,13 @@ event bro_init()
 
 	Log::remove_default_filter(HTTP::LOG);
 	Log::add_filter(HTTP::LOG, [$name = "http-interfaces",
-								$path_func(id: Log::ID, path: string, rec: HTTP::Info) = 
-										{ 
-										local peer = get_event_peer()$descr;
-										if ( peer in Cluster::nodes && Cluster::nodes[peer]?$interface )
-											return cat("http_", Cluster::nodes[peer]$interface);
-										else
-											return "http";
-										}
-								]);
+	                            $path_func(id: Log::ID, path: string, rec: HTTP::Info) = 
+	                            	{ 
+	                            	local peer = get_event_peer()$descr;
+	                            	if ( peer in Cluster::nodes && Cluster::nodes[peer]?$interface )
+	                            		return cat("http_", Cluster::nodes[peer]$interface);
+	                            	else
+	                            		return "http";
+	                            	}
+	                            ]);
 	}
\ No newline at end of file
--- securityonion-bro-scripts-20121004.orig/bpfconf.bro
+++ securityonion-bro-scripts-20121004/bpfconf.bro
@@ -3,12 +3,16 @@
 ##! hacks in it to work around bugs discovered in Bro.
 
 @load base/frameworks/notice
+@load ./hostname
+@load ./interface
 
 module BPFConf;
 
 export {
 	## The file that is watched on disk for BPF filter changes.
-	const filename = "/etc/nsm/rules/bpf.conf" &redef;
+	## Two templated variables are available; "hostname" and "interface".
+	## They can be used by surrounding the term by doubled curly braces.
+	const filename = "/etc/nsm/{{hostname}}-{{interface}}/bpf-bro.conf" &redef;
 
 	redef enum Notice::Type += { 
 		## Invalid filter notice.
@@ -18,6 +22,8 @@ export {
 
 global filter_parts: vector of string = vector();
 
+global current_filter_filename = "";
+
 type FilterLine: record {
 	s: string;
 };
@@ -75,11 +81,31 @@ event BPFConf::line(description: Input::
 	schedule 2secs { is_filter_done() };
 	}
 
-event bro_init() &priority=5
+
+function add_filter_file()
 	{
-	if ( BPFConf::filename != "" )
+	local real_filter_filename = BPFConf::filename;
+
+	# Support the interface template value.
+	if ( SecurityOnion::interface != "" )
+		real_filter_filename = gsub(real_filter_filename, /\{\{interface\}\}/, SecurityOnion::interface);
+	
+	# Support the hostname template value.
+	if ( SecurityOnion::hostname != "" )
+		real_filter_filename = gsub(real_filter_filename, /\{\{hostname\}\}/, SecurityOnion::hostname);
+
+	if ( /\{\{/ in real_filter_filename )
+		{
+		Reporter::warning(fmt("Template value remaining in BPFConf filename: %s", real_filter_filename));
+		return;
+		}
+	else
+		Reporter::info(fmt("BPFConf filename set: %s", real_filter_filename));
+
+	if ( real_filter_filename != current_filter_filename )
 		{
-		Input::add_event([$source=BPFConf::filename,
+		current_filter_filename = real_filter_filename;
+		Input::add_event([$source=real_filter_filename,
 		                  $name="bpfconf",
 		                  $reader=Input::READER_RAW,
 		                  $mode=Input::REREAD,
@@ -88,3 +114,18 @@ event bro_init() &priority=5
 		                  $ev=BPFConf::line]);
 		}
 	}
+
+event SecurityOnion::found_hostname(hostname: string)
+	{
+	add_filter_file();
+	}
+event SecurityOnion::found_interface(inter: string)
+	{
+	add_filter_file();
+	}
+
+event bro_init() &priority=5
+	{
+	if ( BPFConf::filename != "" )
+		add_filter_file();
+	}
--- /dev/null
+++ securityonion-bro-scripts-20121004/interface.bro
@@ -0,0 +1,52 @@
+module SecurityOnion;
+
+@load base/frameworks/input
+@load base/frameworks/cluster
+
+export {
+	## Event to capture when the interface is discovered.
+	global SecurityOnion::found_interface: event(inter: string);
+
+	## Interface being sniffed.
+	global interface = "";
+}
+
+type InterfaceCmdLine: record { s: string; };
+
+event SecurityOnion::interface_line(description: Input::EventDescription, tpe: Input::Event, s: string)
+	{
+	local parts = split_all(s, /[[:blank:]]*=[[:blank:]]*/);
+	if ( 3 in parts )
+		{
+		interface = parts[3];
+		system(fmt("rm %s", description$source));
+		event SecurityOnion::found_interface(interface);
+		}
+	}
+
+event add_interface_reader(name: string)
+	{
+	Input::add_event([$source=name,
+	                  $name=name,
+	                  $reader=Input::READER_RAW,
+	                  $want_record=F,
+	                  $fields=InterfaceCmdLine,
+	                  $ev=SecurityOnion::interface_line]);
+	}
+
+event bro_init() &priority=5
+	{
+	local peer = get_event_peer()$descr;
+	if ( peer in Cluster::nodes && Cluster::nodes[peer]?$interface )
+		{
+		interface = Cluster::nodes[peer]$interface;
+		event SecurityOnion::found_interface(interface);
+		return;
+		}
+	else
+		{
+		local tmpfile = "/tmp/bro-interface-" + unique_id("");
+		system(fmt("grep \"interface\" /opt/bro/etc/node.cfg 2>/dev/null | grep -v \"^[[:blank:]]*#\" > %s", tmpfile));
+		event add_interface_reader(tmpfile);
+		}
+	}
--- /dev/null
+++ securityonion-bro-scripts-20121004/hostname.bro
@@ -0,0 +1,37 @@
+module SecurityOnion;
+
+@load base/frameworks/input
+
+export {
+	## Event to capture when the hostname is discovered.
+	global SecurityOnion::found_hostname: event(hostname: string);
+
+	## Hostname for this box.
+	global hostname = "";
+}
+
+type HostnameCmdLine: record { s: string; };
+
+event SecurityOnion::hostname_line(description: Input::EventDescription, tpe: Input::Event, s: string)
+	{
+	hostname = s;
+	system(fmt("rm %s", description$source));
+	event SecurityOnion::found_hostname(hostname);
+	}
+
+event add_hostname_reader(name: string)
+	{
+	Input::add_event([$source=name,
+	                  $name=name,
+	                  $reader=Input::READER_RAW,
+	                  $want_record=F,
+	                  $fields=HostnameCmdLine,
+	                  $ev=SecurityOnion::hostname_line]);
+	}
+
+event bro_init() &priority=5
+	{
+	local tmpfile = "/tmp/bro-hostname-" + unique_id("");
+	system(fmt("hostname > %s", tmpfile));
+	event add_hostname_reader(tmpfile);
+	}
\ No newline at end of file
--- securityonion-bro-scripts-20121004.orig/__load__.bro
+++ securityonion-bro-scripts-20121004/__load__.bro
@@ -1,3 +1,5 @@
+@load ./hostname
+@load ./interface
 @load ./bpfconf
 @load ./add-interface-to-logs
 @load ./load-non-default-scripts
