Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 securityonion-bro-scripts (20121004-0ubuntu0securityonion35) precise; urgency=low
 .
   * update ShellShock
Author: Doug Burks <doug.burks@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- securityonion-bro-scripts-20121004.orig/shellshock/main.bro
+++ securityonion-bro-scripts-20121004/shellshock/main.bro
@@ -1,20 +1,30 @@
 
 @load base/frameworks/notice
 @load base/protocols/http
+@load base/utils/time
 @load-sigs ./shellshock-http.sig
 
 module ShellShock;
 
 export {
 	redef enum Notice::Type += {
-		## Indicates a high likelyhood of successful shellshock exploitation.
-		Exploit
+		## Indicates a high likelihood of successful shellshock exploitation.
+		Exploit,
+		## Indicates that a host was detected as scanning for shellshock vulnerable hosts.
+		Scanner,
 	};
 
 	redef enum HTTP::Tags += {
 		HIT
 	};
 
+	## The number of apparent attacks a host must send for it to be 
+	## detected as ShellShock::Scanner.
+	const scan_threshold = 10 &redef;
+
+	## The period over which scanner detection is performed.
+	const scan_detection_period = 10min &redef;
+
 	## This contains a list of MIME types that would typically be
 	## seen as droppers after the exploitation of ShellShock.
 	const post_exploit_file_types: set[string] = {
@@ -31,23 +41,28 @@ redef Signatures::actions += {
 	["shellshock-http"] = Signatures::SIG_IGNORE
 };
 
+# Please be careful with this.
+redef record SumStats::Observation += {
+	shellshock_victim: addr &optional;
+};
+
 event bro_init()
 	{
 	local r1 = SumStats::Reducer($stream="shellshock.possible_http_victim", 
 	                             $apply=set(SumStats::LAST),
-	                             $num_last_elements=2);
+	                             $num_last_elements=1);
 
 	local r2 = SumStats::Reducer($stream="shellshock.possible_dhcp_victim", 
 	                             $apply=set(SumStats::LAST),
-	                             $num_last_elements=2);
+	                             $num_last_elements=1);
 
 	local r3 = SumStats::Reducer($stream="shellshock.possible_post_exploit_file", 
 	                             $apply=set(SumStats::LAST),
-	                             $num_last_elements=2);
+	                             $num_last_elements=1);
 
 	local r4 = SumStats::Reducer($stream="shellshock.possible_post_exploit_ping", 
 	                             $apply=set(SumStats::LAST),
-	                             $num_last_elements=2);
+	                             $num_last_elements=1);
 
 	SumStats::create([$name="look-for-shellshock",
 	                  $epoch=5mins,
@@ -98,11 +113,71 @@ event bro_init()
 
 	                  		NOTICE([$note=Exploit,
 	                  		        $src=key$host,
-	                  		        $msg=fmt("High likelyhood of successful CVE-2014-6271 exploitation against %s.", key$host),
+	                  		        $msg=fmt("High likelihood of successful CVE-2014-6271 exploitation against %s.  %s and %s", key$host, attack_msg, exploit_msg),
 	                  		        $sub=fmt("%s and %s", attack_msg, exploit_msg),
 	                  		        $identifier=cat(key$host)]);
 	                  		}
 	                  	}]);
+
+
+	local r5 = SumStats::Reducer($stream="shellshock.possible_http_attacker", 
+	                             $apply=set(SumStats::SAMPLE),
+	                             $num_samples=5);
+
+	local r6 = SumStats::Reducer($stream="shellshock.possible_dhcp_attacker", 
+	                             $apply=set(SumStats::SAMPLE),
+	                             $num_samples=5);
+
+	SumStats::create([$name="shellshock-find-scanners",
+	                  $epoch=scan_detection_period,
+	                  $reducers=set(r5, r6),
+	                  $threshold_val(key: SumStats::Key, result: SumStats::Result): double =
+	                  	{
+	                  	local http_attacks = result["shellshock.possible_http_attacker"];
+	                  	local dhcp_attacks = result["shellshock.possible_dhcp_attacker"];
+	                  	return http_attacks$num + dhcp_attacks$num + 0.0;
+	                  	},
+	                  $threshold = scan_threshold + 0.0,
+	                  $threshold_crossed(key: SumStats::Key, result: SumStats::Result) = 
+	                  	{
+	                  	local http_attacks = result["shellshock.possible_http_attacker"];
+	                  	local dhcp_attacks = result["shellshock.possible_dhcp_attacker"];
+	                  	local total_attacks = http_attacks$num + dhcp_attacks$num;
+
+	                  	local payload = "";
+	                  	local period = 0secs;
+	                  	local victim_addrs = "";
+	                  	if ( http_attacks$num > 0 )
+	                  		{
+	                  		period = http_attacks$end - http_attacks$begin;
+	                  		for ( http_i in http_attacks$samples )
+	                  			{
+	                  			payload = http_attacks$samples[http_i]$str;
+	                  			victim_addrs = fmt("%s%s%s", victim_addrs, |victim_addrs|>0 ? ", " : "", http_attacks$samples[http_i]$shellshock_victim);
+	                  			}
+	                  		}
+	                  	else if ( dhcp_attacks$num > 0 )
+	                  		{
+	                  		period = dhcp_attacks$end - dhcp_attacks$begin;
+	                  		for ( http_i in dhcp_attacks$samples )
+	                  			{
+	                  			payload = dhcp_attacks$samples[http_i]$str;
+	                  			victim_addrs = fmt("%s%s%s", victim_addrs, |victim_addrs|>0 ? ", " : "", dhcp_attacks$samples[http_i]$shellshock_victim);
+	                  			}
+	                  		}
+
+	                  	if ( |payload| > 100 )
+	                  		{
+	                  		payload = payload[0:99] + "<too long, trimmed by Bro>";
+	                  		}
+
+	                  	NOTICE([$note=Scanner,
+	                  	        $src=key$host,
+	                  	        $msg=fmt("%s sent at least %d CVE-2014-6271 exploit attempts in %s.", key$host, total_attacks, duration_to_mins_secs(period)),
+	                  	        $sub=fmt("Used payload: \"%s\" against sample victim hosts: %s", payload, victim_addrs),
+	                  	        $identifier=cat(key$host)]);
+	                  	}]);
+
 	}
 
 
@@ -113,6 +188,8 @@ function ShellShock::http_header_sig_mat
 		add c$http$tags[ShellShock::HIT];
 
 	SumStats::observe("shellshock.possible_http_victim", [$host=c$id$resp_h], [$str=data]);
+	SumStats::observe("shellshock.possible_http_attacker", [$host=c$id$orig_h], [$str=data, $shellshock_victim=c$id$resp_h]);
+
 	return F;
 	}
 
@@ -121,19 +198,10 @@ event dhcp_ack(c: connection, msg: dhcp_
 	if ( matcher in host_name )
 		{
 		SumStats::observe("shellshock.possible_dhcp_victim", [$host=c$id$resp_h], [$str=host_name]);
+		SumStats::observe("shellshock.possible_dhcp_attacker", [$host=c$id$orig_h], [$str=host_name, $shellshock_victim=c$id$resp_h]);
 		}
 	}
 
-function ShellShock::http_request_sig_match(state: signature_state, data: string): bool
-	{
-	local c = state$conn;
-	if ( c?$http )
-		add c$http$tags[ShellShock::HIT];
-
-	SumStats::observe("shellshock.possible_http_victim", [$host=c$id$resp_h], [$str=data]);
-	return F;
-	}
-
 event file_over_new_connection(f: fa_file, c: connection, is_orig: bool)
 	{
 	if ( f?$mime_type && f$mime_type in post_exploit_file_types )
--- securityonion-bro-scripts-20121004.orig/shellshock/shellshock-http.sig
+++ securityonion-bro-scripts-20121004/shellshock/shellshock-http.sig
@@ -1,10 +1,3 @@
-#signature shellshock-http {
-#	ip-proto == tcp
-#	http-request /.*\(\) \{/
-#
-#	eval ShellShock::http_request_sig_match
-#}
-
 signature shellshock-http-header {
 	ip-proto == tcp
 	http-request-header /.*(\(|%28)(\)|%29)( |%20)(\{|%7B)/
--- securityonion-bro-scripts-20121004.orig/shellshock/README.md
+++ securityonion-bro-scripts-20121004/shellshock/README.md
@@ -40,11 +40,11 @@ notice.log
 	#empty_field	(empty)
 	#unset_field	-
 	#path	notice
-	#open	2014-09-25-13-46-45
-	#fields	ts	uid	id.orig_h	id.orig_p	id.resp_h	id.resp_p	fuid	file_mime_type	file_desc	proto	note	msg	sub	src	dst	p	n	peer_descr	actions	suppress_for	dropped	remote_location.country_code	remote_location.region	remote_location.city	remote_location.latitude	remote_location.longitude
+	#open	2014-09-26-10-47-02
+	#fields	ts	uid	id.orig_h	id.orig_p	id.resp_h	id.resp_p	fuid	file_mime_type	file_desc	proto	note	msg	sub	src	dst	p	peer_descr	actions	suppress_for	dropped	remote_location.country_code	remote_location.region	remote_location.city	remote_location.latitude	remote_location.longitude
 	#types	time	string	addr	port	addr	port	string	string	string	enum	enum	string	string	addr	addr	port	count	string	set[enum]	interval	bool	string	string	string	double	double
-	1411666207.588581	-	-	-	-	-	-	-	-	-	ShellShock::Exploit	High likelyhood of successful CVE-2014-6271 exploitation against 10.246.50.6.	Sent a ping to 10.246.50.2 within 0.000 seconds of an attack.	10.246.50.6	-	-	-	bro	Notice::ACTION_LOG	3600.000000	F	-	-	-	-	-
-	#close	2014-09-25-13-46-45
+	1411666207.583791	-	-	-	-	-	-	-	-	-	ShellShock::Scanner	10.246.50.2 sent at least 1 CVE-2014-6271 exploit attempts in 0m0s.	Used payload: "() { :;}; /bin/ping -c1 10.246.50.2" :: against sample victim hosts: 10.246.50.6	10.246.50.2	-	-	-	bro	Notice::ACTION_LOG	3600.00000-
+	1411666207.588581	-	-	-	-	-	-	-	-	-	ShellShock::Exploit	High likelihood of successful CVE-2014-6271 exploitation against 10.246.50.6.  Attack over HTTP and sent a ping to 10.246.50.2 within 0.000 seconds of an attack.	Attack over HTTP and sent a ping to 10.246.50.2 within 0.000 seconds of an attack.	10.246.50.6	-	-	-	bro	Notice::ACTION_LOG	3600.000000	F	-	-	-	-	-
 
 
 http.log
@@ -54,11 +54,11 @@ http.log
 	#empty_field	(empty)
 	#unset_field	-
 	#path	http
-	#open	2014-09-25-13-46-45
+	#open	2014-09-26-10-47-02
 	#fields	ts	uid	id.orig_h	id.orig_p	id.resp_h	id.resp_p	trans_depth	method	host	uri	referrer	user_agent	request_body_len	response_body_len	status_code	status_msg	info_code	info_msg	filename	tags	username	password	proxied	orig_fuids	orig_mime_types	resp_fuids	resp_mime_types
 	#types	time	string	addr	port	addr	port	count	string	string	string	string	string	count	count	count	string	count	string	string	set[enum]	string	string	set[string]	vector[string]	vector[string]	vector[string]	vector[string]
-	1411666207.583791	CRyZah1yxhmar8Xsje	10.246.50.2	43616	10.246.50.6	80	1	GET	10.246.50.6	/exploitable.cgi	-	() { :;}; /bin/ping -c1 10.246.50.2	0	615	500	Internal Server Error	-	-	-	ShellShock::HIT	-	-	-	-	-	FgVgjb1GU12ixSuugc	text/html
-	#close	2014-09-25-13-46-45
+	1411666207.583791	CC7s232GDnmtxZUly5	10.246.50.2	43616	10.246.50.6	80	1	GET	10.246.50.6	/exploitable.cgi	-	() { :;}; /bin/ping -c1 10.246.50.2	0	615	500	Internal Server Error	-	-	-	ShellShock::HIT	-	-	-	-	-	FgVgjb1GU12ixSuugc	text/html
+	#close	2014-09-26-10-47-02
 
 
 Installation
@@ -72,6 +72,23 @@ the shellshock detector.
 	git clone --recursive https://github.com/broala/bro-shellshock.git shellshock
 	echo "@load shellshock" >> local.bro
 
+
+Configuration
+-------------
+
+There are a couple of configuration variables.
+
+	## The number of apparent attacks a host must send for it to be 
+	## detected as ShellShock::Scanner.
+	const scan_threshold = 10 &redef;
+
+	## The period over which scanner detection is performed.
+	const scan_detection_period = 10min &redef;
+
+These can be used to expand how long ShellShock scanned are watched for
+and the number of attacks that need to happen before they are declared
+to be scanning and have a notice created.
+
 Author
 ------
 
@@ -80,7 +97,7 @@ Author
 Thanks
 ------
 
-	Stephen Hosom - for providing a fully exploiting packet capture.
-
-
+	Stephen Hosom   - Provided a fully exploiting packet capture.
+	Nick Weaver     - Valuable discussion on how shellshock is and isn't exploitable.
+	Vlad Grigorescu - Feature request after feature request.
 
